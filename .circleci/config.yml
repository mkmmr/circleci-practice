# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.5

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs

executors:
  node:
    docker:
      - image: circleci/node # deprecated

# commands:

jobs:
  assume:
    executor: node
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Assume role
          command: |
            aws_sts_credentials=$(aws sts assume-role-with-web-identity \
              --role-arn ${AWS_IAM_ROLE_ARN} \
              --web-identity-token ${CIRCLE_OIDC_TOKEN} \
              --role-session-name "circleci-oidc" \
              --duration-seconds 900 \
              --query "Credentials" \
              --output "json")
            echo export AWS_ACCESS_KEY_ID="$(echo $aws_sts_credentials | jq -r '.AccessKeyId')" >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY="$(echo $aws_sts_credentials | jq -r '.SecretAccessKey')" >> $BASH_ENV
            echo export AWS_SESSION_TOKEN="$(echo $aws_sts_credentials | jq -r '.SessionToken')" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: deploy CloudFormation
          command: |
            set -x
            aws cloudformation deploy --template-file cloudformation/01-Network.yml --stack-name CircleciNetwork
            aws cloudformation deploy --template-file cloudformation/02-EC2.yml --stack-name CircleciEC2
            aws cloudformation deploy --template-file cloudformation/03-RDS.yml --stack-name CircleciRDS
            aws cloudformation deploy --template-file cloudformation/04-ALB.yml --stack-name CircleciALB
            aws cloudformation deploy --template-file cloudformation/05-IAM.yml --stack-name CircleciIAM --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation deploy --template-file cloudformation/06-S3.yml --stack-name CircleciS3
      - run:
          name: set environment variable
          command: |
            set -x
            echo export EC2_PUBLIC_IP_ADDRESS="$(echo $aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=CircleciEC2" --query 'Reservations[].Instances[].PublicIpAddress[]' --output text | tr '\t' '\n')" >> $BASH_ENV
            echo export AWS_ALB="$(echo $aws elbv2 describe-load-balancers --query "LoadBalancers[].[DNSName]" --output text | tr '\t' '\n' | grep "CFn")" >> $BASH_ENV
            echo export S3_IAM_ACCESS_KEY="$(echo $aws cloudformation describe-stacks --stack-name AnsibleIAM | jq -r '.Stacks[] | .Outputs[] | select(.OutputKey == "StackIAMAccessKey")| .OutputValue')" >> $BASH_ENV
            echo export S3_IAM_SECRET_ACCESS_KEY="$(echo $aws cloudformation describe-stacks --stack-name AnsibleIAM | jq -r '.Stacks[] | .Outputs[] | select(.OutputKey == "StackIAMSecretAccessKey")| .OutputValue')" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: test
          command: |
            echo ${EC2_PUBLIC_IP_ADDRESS:0:-1}
            echo ${AWS_ALB:0:-1}
            echo ${S3_IAM_ACCESS_KEY:0:-1}
            echo ${S3_IAM_SECRET_ACCESS_KEY:0:-1}

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  # oidc:
  #   jobs:
  #     - aws-oidc:
  #         context: aws # Context を設定しないと OIDC が使用できないので注意
  version: 2
  release:
    jobs:
      - assume:
          context: aws
